/**
 * App Loader - р╣Вр╕лр╕ер╕Фр╣Бр╕нр╕Ы
 * р╕гр╕▒р╕Ър╕Ыр╕гр╕░р╕Бр╕▒р╕Щр╕зр╣Ир╕▓р╕Чр╕╕р╕Бр╣Вр╕бр╕Фр╕╣р╕ер╣Бр╕нр╕Ыр╕бр╕╖р╕нр╕Цр╕╖р╕нр╣Вр╕лр╕ер╕Фр╕Хр╕▓р╕бр╕ер╕│р╕Фр╕▒р╕Ър╕Чр╕╡р╣Ир╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕З
 */

class AppLoader {
    constructor() {
        this.loadedModules = new Set();
        this.loadingModules = new Set();
        this.moduleLoadQueue = [];

        console.log('[App Loader] р╣Вр╕лр╕ер╕Фр╣Бр╕нр╕Ыр╕Цр╕╣р╕Бр╕кр╕гр╣Йр╕▓р╕Зр╣Бр╕ер╣Йр╕з');
    }

    // р╣Вр╕лр╕ер╕Фр╣Вр╕бр╕Фр╕╣р╕е
    async loadModule(moduleName, moduleUrl, dependencies = []) {
        try {
            console.log(`[App Loader] р╣Ар╕гр╕┤р╣Ир╕бр╣Вр╕лр╕ер╕Фр╣Вр╕бр╕Фр╕╣р╕е: ${moduleName}`);

            // р╕лр╕▓р╕Бр╣Вр╕лр╕ер╕Фр╣Бр╕ер╣Йр╕з р╣Гр╕лр╣Йр╕Др╕╖р╕Щр╕Др╣Ир╕▓р╣Вр╕Фр╕вр╕Хр╕гр╕З
            if (this.loadedModules.has(moduleName)) {
                console.log(`[App Loader] р╣Вр╕бр╕Фр╕╣р╕е ${moduleName} р╣Вр╕лр╕ер╕Фр╣Бр╕ер╣Йр╕з`);
                return true;
            }

            // р╕лр╕▓р╕Бр╕Бр╕│р╕ер╕▒р╕Зр╣Вр╕лр╕ер╕Ф р╣Гр╕лр╣Йр╕гр╕нр╣Гр╕лр╣Йр╣Ар╕кр╕гр╣Зр╕И
            if (this.loadingModules.has(moduleName)) {
                console.log(`[App Loader] р╣Вр╕бр╕Фр╕╣р╕е ${moduleName} р╕Бр╕│р╕ер╕▒р╕Зр╣Вр╕лр╕ер╕Ф р╕гр╕нр╣Гр╕лр╣Йр╣Ар╕кр╕гр╣Зр╕И...`);
                return await this.waitForModule(moduleName);
            }

            // р╕Чр╕│р╣Ар╕Др╕гр╕╖р╣Ир╕нр╕Зр╕лр╕бр╕▓р╕вр╕зр╣Ир╕▓р╕Бр╕│р╕ер╕▒р╕Зр╣Вр╕лр╕ер╕Ф
            this.loadingModules.add(moduleName);

            // р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Бр╕▓р╕гр╕Юр╕╢р╣Ир╕Зр╕Юр╕▓
            for (const dep of dependencies) {
                if (!this.loadedModules.has(dep)) {
                    console.log(`[App Loader] р╣Вр╕бр╕Фр╕╣р╕е ${moduleName} р╕Юр╕╢р╣Ир╕Зр╕Юр╕▓ ${dep} р╣Вр╕лр╕ер╕Фр╕Бр╕▓р╕гр╕Юр╕╢р╣Ир╕Зр╕Юр╕▓р╕Бр╣Ир╕нр╕Щ`);
                    await this.loadModule(dep, this.getModuleUrl(dep));
                }
            }

            // р╣Вр╕лр╕ер╕Фр╣Вр╕бр╕Фр╕╣р╕е
            await this.loadScript(moduleUrl);

            // р╕Чр╕│р╣Ар╕Др╕гр╕╖р╣Ир╕нр╕Зр╕лр╕бр╕▓р╕вр╕зр╣Ир╕▓р╣Вр╕лр╕ер╕Фр╣Бр╕ер╣Йр╕з
            this.loadedModules.add(moduleName);
            this.loadingModules.delete(moduleName);

            console.log(`[App Loader] тЬЕ р╣Вр╕бр╕Фр╕╣р╕е ${moduleName} р╣Вр╕лр╕ер╕Фр╣Ар╕кр╕гр╣Зр╕И`);
            return true;

        } catch (error) {
            console.error(`[App Loader] р╣Вр╕лр╕ер╕Фр╣Вр╕бр╕Фр╕╣р╕е ${moduleName} р╕ер╣Йр╕бр╣Ар╕лр╕ер╕з:`, error);
            this.loadingModules.delete(moduleName);
            return false;
        }
    }

    // р╕гр╕нр╣Гр╕лр╣Йр╣Вр╕бр╕Фр╕╣р╕ер╣Вр╕лр╕ер╕Фр╣Ар╕кр╕гр╣Зр╕И
    async waitForModule(moduleName, timeout = 10000) {
        const startTime = Date.now();

        while (this.loadingModules.has(moduleName)) {
            if (Date.now() - startTime > timeout) {
                throw new Error(`р╕гр╕нр╣Вр╕бр╕Фр╕╣р╕е ${moduleName} р╕лр╕бр╕Фр╣Ар╕зр╕ер╕▓`);
            }
            await new Promise(resolve => setTimeout(resolve, 100));
        }

        return this.loadedModules.has(moduleName);
    }

    // р╣Вр╕лр╕ер╕Фр╕кр╕Др╕гр╕┤р╕Ыр╕Хр╣М
    async loadScript(url) {
        return new Promise((resolve, reject) => {
            const script = document.createElement('script');
            script.src = url;
            script.onload = resolve;
            script.onerror = reject;
            document.head.appendChild(script);
        });
    }

    // р╕Фр╕╢р╕З URL р╣Вр╕бр╕Фр╕╣р╕е
    getModuleUrl(moduleName) {
        const baseUrl = 'scripts/extensions/third-party/mobile/app/';
        const moduleUrls = {
            'context-monitor': baseUrl + 'context-monitor.js',
            'friend-renderer': baseUrl + 'friend-renderer.js',
            'message-sender': baseUrl + 'message-sender.js',
            'message-app': baseUrl + 'message-app.js',
            'real-time-sync': baseUrl + 'real-time-sync.js'
        };

        return moduleUrls[moduleName] || `${baseUrl}${moduleName}.js`;
    }

    // р╣Вр╕лр╕ер╕Фр╣Вр╕бр╕Фр╕╣р╕ер╕Ир╕│р╕Щр╕зр╕Щр╕бр╕▓р╕Б
    async loadModules(modules) {
        const results = [];

        for (const module of modules) {
            const result = await this.loadModule(
                module.name,
                module.url || this.getModuleUrl(module.name),
                module.dependencies || []
            );
            results.push({ name: module.name, success: result });
        }

        return results;
    }

    // р╕Фр╕╢р╕Зр╕кр╕Цр╕▓р╕Щр╕░р╣Вр╕лр╕ер╕Ф
    getLoadStatus() {
        return {
            loadedModules: Array.from(this.loadedModules),
            loadingModules: Array.from(this.loadingModules),
            totalLoaded: this.loadedModules.size,
            totalLoading: this.loadingModules.size
        };
    }
}

// р╕кр╕гр╣Йр╕▓р╕Зр╕нр╕┤р╕Щр╕кр╣Бр╕Хр╕Щр╕Лр╣Мр╣Вр╕лр╕ер╕Фр╣Бр╕нр╕Ыр╕Чр╕▒р╣Ир╕зр╣Др╕Ы
if (typeof window.appLoader === 'undefined') {
    window.appLoader = new AppLoader();
}

// р╣Вр╕лр╕ер╕Фр╣Вр╕бр╕Фр╕╣р╕ер╣Бр╕нр╕Ыр╕бр╕╖р╕нр╕Цр╕╖р╕нр╣Вр╕Фр╕вр╕нр╕▒р╕Хр╣Вр╕Щр╕бр╕▒р╕Хр╕┤
async function loadMobileAppModules() {
    try {
        console.log('[App Loader] ЁЯЪА р╣Ар╕гр╕┤р╣Ир╕бр╣Вр╕лр╕ер╕Фр╣Вр╕бр╕Фр╕╣р╕ер╣Бр╕нр╕Ыр╕бр╕╖р╕нр╕Цр╕╖р╕н');

        const modules = [
            {
                name: 'context-monitor',
                dependencies: []
            },
            {
                name: 'friend-renderer',
                dependencies: ['context-monitor']
            },
            {
                name: 'message-sender',
                dependencies: ['context-monitor']
            },
            {
                name: 'message-app',
                dependencies: ['context-monitor', 'friend-renderer', 'message-sender']
            },
            {
                name: 'real-time-sync',
                dependencies: ['context-monitor', 'friend-renderer', 'message-app']
            }
        ];

        const results = await window.appLoader.loadModules(modules);

        // р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Ьр╕ер╕ер╕▒р╕Юр╕Шр╣Мр╣Вр╕лр╕ер╕Ф
        const failed = results.filter(r => !r.success);
        if (failed.length > 0) {
            console.error('[App Loader] р╣Вр╕бр╕Фр╕╣р╕ер╕Ър╕▓р╕Зр╕кр╣Ир╕зр╕Щр╣Вр╕лр╕ер╕Фр╕ер╣Йр╕бр╣Ар╕лр╕ер╕з:', failed);
        }

        const succeeded = results.filter(r => r.success);
        console.log(`[App Loader] тЬЕ р╣Вр╕лр╕ер╕Фр╕кр╕│р╣Ар╕гр╣Зр╕И ${succeeded.length}/${results.length} р╣Вр╕бр╕Фр╕╣р╕е`);

        // р╣Ар╕гр╕┤р╣Ир╕бр╕Лр╕┤р╕Зр╕Др╣Мр╣Бр╕Ър╕Ър╣Ар╕гр╕╡р╕вр╕ер╣Др╕Чр╕бр╣М
        setTimeout(() => {
            if (window.realTimeSync && !window.realTimeSync.isRunning) {
                console.log('[App Loader] ЁЯФД р╣Ар╕гр╕┤р╣Ир╕бр╕Лр╕┤р╕Зр╕Др╣Мр╣Бр╕Ър╕Ър╣Ар╕гр╕╡р╕вр╕ер╣Др╕Чр╕бр╣М');
                window.realTimeSync.start();
            }
        }, 1000);

    } catch (error) {
        console.error('[App Loader] р╣Вр╕лр╕ер╕Фр╣Вр╕бр╕Фр╕╣р╕ер╣Бр╕нр╕Ыр╕бр╕╖р╕нр╕Цр╕╖р╕нр╕ер╣Йр╕бр╣Ар╕лр╕ер╕з:', error);
    }
}

// р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓р╕нр╕вр╕╣р╣Ир╣Гр╕Щр╕кр╕ар╕▓р╕Юр╣Бр╕зр╕Фр╕ер╣Йр╕нр╕бр╕бр╕╖р╕нр╕Цр╕╖р╕нр╕лр╕гр╕╖р╕нр╣Др╕бр╣И
function isMobileEnvironment() {
    return window.location.pathname.includes('mobile') ||
           document.querySelector('[data-app]') !== null ||
           window.mobilePhone !== undefined;
}

// р╣Вр╕лр╕ер╕Фр╕нр╕▒р╕Хр╣Вр╕Щр╕бр╕▒р╕Хр╕┤р╣Бр╕Ър╕Ър╕ер╣Ир╕▓р╕Кр╣Йр╕▓
setTimeout(() => {
    if (isMobileEnvironment()) {
        loadMobileAppModules();
    }
}, 1000);

console.log('[App Loader] р╣Вр╕бр╕Фр╕╣р╕ер╣Вр╕лр╕ер╕Фр╣Бр╕нр╕Ыр╣Вр╕лр╕ер╕Фр╣Ар╕кр╕гр╣Зр╕И');